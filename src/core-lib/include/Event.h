//
// Created by tomek on 26.04.2022.
//

#ifndef PROI_PROJEKT_EVENT_H
#define PROI_PROJEKT_EVENT_H

#include <exception>
#include <string>

/**
 * Indicates an error encountered while constructing an Event instance.
 */
struct EventConstructionException : public std::exception {
    [[nodiscard]] const char * what () const noexcept override;
};

/**
 * \brief Represents a single event of type Event::EventType
 *
 * Event types are represented with EventType enum. EventType always needs to be passes to constructor, followed
 * by appropriate args. If incorrect args are provided, an EvenConstructionException is thrown.
 *
 * Event class has multiple constructor that can be used for initializing different events.
 *
 * Events can be generated by any classed and should be passed to an event queue (./EventQueue.h)
 */
class Event {
public:

    /**
     * Represents event types
     */
    enum EventType {
        Keypress = 0,

        NullEvent
    };

    EventType type;

    // FIXME not so elegant
    Event(EventType, unsigned int ui1);

    explicit Event(EventType);

    /**
     * Carries additional event info for Keypress event
     */
    struct KeypressEvent {
        unsigned int keyCode;

    };

    // ####################################################3
    /**
     * Contains additional event info. For every event, only one field contains
     * actual data - the rest is initialized with null.
     */
    union info_u {
        KeypressEvent key;
        ~info_u(){};  // DO NOT change this to =default, or else it will stop working
    } info = {};

    Event()=delete;
};


#endif //PROI_PROJEKT_EVENT_H
