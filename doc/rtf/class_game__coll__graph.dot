digraph "Game"
{
 // INTERACTIVE_SVG=YES
 // LATEX_PDF_SIZE
  bgcolor="transparent";
  edge [fontname="Helvetica",fontsize="10",labelfontname="Helvetica",labelfontsize="10"];
  node [fontname="Helvetica",fontsize="10",shape=record];
  Node1 [label="{Game\n||+ Game()\l+ Game()\l+ run()\l+ setActiveState()\l+ setFinishedState()\l+ setPauseState()\l+ setMenuState()\l+ quit()\l+ getState()\l+ getStats()\l# setup()\l# initStates()\l# initComponents()\l# initScoreboard()\l# initUI()\l# start()\l# reset()\l# prepareLevel()\l# end()\l# redrawUI()\l}",height=0.2,width=0.4,color="black", fillcolor="grey75", style="filled", fontcolor="black",tooltip=" "];
  Node2 -> Node1 [color="grey25",fontsize="10",style="solid",label=" #keyboardController_" ,arrowhead="odiamond",fontname="Helvetica"];
  Node2 [label="{unique_ptr\< KeyboardController \>\n||}",height=0.2,width=0.4,color="grey75",tooltip=" "];
  Node3 -> Node1 [color="grey25",fontsize="10",style="solid",label=" #gameStats_" ,arrowhead="odiamond",fontname="Helvetica"];
  Node3 [label="{unique_ptr\< GameStatistics \>\n||}",height=0.2,width=0.4,color="grey75",tooltip=" "];
  Node4 -> Node1 [color="grey25",fontsize="10",style="solid",label=" #menu_state_\n#finished_state_\n#pause_state_\n#active_state_" ,arrowhead="odiamond",fontname="Helvetica"];
  Node4 [label="{unique_ptr\< GameState \>\n||}",height=0.2,width=0.4,color="grey75",tooltip=" "];
  Node5 -> Node1 [color="grey25",fontsize="10",style="solid",label=" #window_" ,arrowhead="odiamond",fontname="Helvetica"];
  Node5 [label="{unique_ptr\< sf::RenderWindow \>\n||}",height=0.2,width=0.4,color="grey75",tooltip=" "];
  Node6 -> Node1 [color="grey25",fontsize="10",style="solid",label=" #eventQueue_" ,arrowhead="odiamond",fontname="Helvetica"];
  Node6 [label="{EventQueue\< Event \>\n||+ EventQueue()\l+ operator=()\l+ registerEvent()\l+ pop()\l+ isEmpty()\l+ size()\l+ clear()\l+ instance()\l- EventQueue()\l}",height=0.2,width=0.4,color="black",URL="$class_event_queue.html",tooltip=" "];
  Node7 -> Node6 [color="grey25",fontsize="10",style="solid",label=" #events_" ,arrowhead="odiamond",fontname="Helvetica"];
  Node7 [label="{queue\< std::unique\l_ptr\< Event \> \>\n||}",height=0.2,width=0.4,color="grey75",tooltip=" "];
  Node8 -> Node6 [color="grey25",fontsize="10",style="solid",label=" #self_" ,arrowhead="odiamond",fontname="Helvetica"];
  Node8 [label="{unique_ptr\< EventQueue \>\n||}",height=0.2,width=0.4,color="grey75",tooltip=" "];
  Node9 -> Node6 [dir="back",color="orange",fontsize="10",style="solid",label=" \< Event \>" ,fontname="Helvetica"];
  Node9 [label="{EventQueue\< E \>\n||+ EventQueue()\l+ operator=()\l+ registerEvent()\l+ pop()\l+ isEmpty()\l+ size()\l+ clear()\l+ instance()\l- EventQueue()\l}",height=0.2,width=0.4,color="black",URL="$class_event_queue.html",tooltip="Singleton class wrapper for std::queue<E>."];
  Node10 -> Node9 [color="grey25",fontsize="10",style="solid",label=" #events_" ,arrowhead="odiamond",fontname="Helvetica"];
  Node10 [label="{queue\< std::unique\l_ptr\< E \> \>\n||}",height=0.2,width=0.4,color="grey75",tooltip=" "];
  Node8 -> Node9 [color="grey25",fontsize="10",style="solid",label=" #self_" ,arrowhead="odiamond",fontname="Helvetica"];
  Node11 -> Node1 [color="grey25",fontsize="10",style="solid",label=" #gameStatsIO_" ,arrowhead="odiamond",fontname="Helvetica"];
  Node11 [label="{unique_ptr\< GameStatsIO \>\n||}",height=0.2,width=0.4,color="grey75",tooltip=" "];
  Node12 -> Node1 [color="grey25",fontsize="10",style="solid",label=" #clock_" ,arrowhead="odiamond",fontname="Helvetica"];
  Node12 [label="{Clock\n||+ Clock()\l+ Clock()\l+ operator=()\l+ tick()\l+ sleep()\l+ initialize()\l+ instance()\l- Clock()\l}",height=0.2,width=0.4,color="black",URL="$class_clock.html",tooltip="Represents an externally controlled clock running at a given frequency."];
  Node13 -> Node12 [dir="back",color="midnightblue",fontsize="10",style="solid",arrowtail="onormal",fontname="Helvetica"];
  Node13 [label="{SimplePublisher\n||+ ~SimplePublisher()\l+ notifySubscribers()\l+ attachSubscriber()\l+ detachSubscriber()\l+ operator==()\l+ operator!=()\l# SimplePublisher()\l}",height=0.2,width=0.4,color="black",URL="$class_simple_publisher.html",tooltip=" "];
  Node14 -> Node13 [color="grey25",fontsize="10",style="solid",label=" #subscribers_" ,arrowhead="odiamond",fontname="Helvetica"];
  Node14 [label="{vector\< SimpleSubscriber * \>\n||}",height=0.2,width=0.4,color="grey75",tooltip=" "];
  Node15 -> Node12 [color="grey25",fontsize="10",style="solid",label=" -interval_" ,arrowhead="odiamond",fontname="Helvetica"];
  Node15 [label="{nanoseconds\n||}",height=0.2,width=0.4,color="grey75",tooltip=" "];
  Node16 -> Node12 [color="grey25",fontsize="10",style="solid",label=" -self_" ,arrowhead="odiamond",fontname="Helvetica"];
  Node16 [label="{unique_ptr\< Clock \>\n||}",height=0.2,width=0.4,color="grey75",tooltip=" "];
  Node17 -> Node12 [color="grey25",fontsize="10",style="solid",label=" -last_tick_" ,arrowhead="odiamond",fontname="Helvetica"];
  Node17 [label="{time_point\< std::chrono\l::steady_clock \>\n||}",height=0.2,width=0.4,color="grey75",tooltip=" "];
  Node18 -> Node1 [color="grey25",fontsize="10",style="solid",label=" #running_" ,arrowhead="odiamond",fontname="Helvetica"];
  Node18 [label="{bool\n||}",height=0.2,width=0.4,color="grey75",tooltip=" "];
  Node19 -> Node1 [color="grey25",fontsize="10",style="solid",label=" #board_" ,arrowhead="odiamond",fontname="Helvetica"];
  Node19 [label="{unique_ptr\< Board \>\n||}",height=0.2,width=0.4,color="grey75",tooltip=" "];
  Node20 -> Node1 [color="grey25",fontsize="10",style="solid",label=" #state_" ,arrowhead="odiamond",fontname="Helvetica"];
  Node20 [label="{GameState\n||+ ~GameState()\l+ getEventHandler()\l# GameState()\l}",height=0.2,width=0.4,color="black",URL="$class_game_state.html",tooltip=" "];
  Node1 -> Node20 [color="grey25",fontsize="10",style="solid",label=" #game_" ,arrowhead="odiamond",fontname="Helvetica"];
  Node21 -> Node20 [color="grey25",fontsize="10",style="solid",label=" #eventHandler_" ,arrowhead="odiamond",fontname="Helvetica"];
  Node21 [label="{unique_ptr\< PublisherEvent\lHandler \>\n||}",height=0.2,width=0.4,color="grey75",tooltip=" "];
}
