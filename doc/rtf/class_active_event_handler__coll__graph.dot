digraph "ActiveEventHandler"
{
 // INTERACTIVE_SVG=YES
 // LATEX_PDF_SIZE
  bgcolor="transparent";
  edge [fontname="Helvetica",fontsize="10",labelfontname="Helvetica",labelfontsize="10"];
  node [fontname="Helvetica",fontsize="10",shape=record];
  Node1 [label="{ActiveEventHandler\n||+ ActiveEventHandler()\l+ ActiveEventHandler()\l+ processEvent()\l}",height=0.2,width=0.4,color="black", fillcolor="grey75", style="filled", fontcolor="black",tooltip=" "];
  Node2 -> Node1 [dir="back",color="midnightblue",fontsize="10",style="solid",arrowtail="onormal",fontname="Helvetica"];
  Node2 [label="{PublisherEventHandler\n||+ handleEvent()\l+ processEvent()\l# PublisherEventHandler()\l}",height=0.2,width=0.4,color="black",URL="$class_publisher_event_handler.html",tooltip="Extended EventHandler for Event class events with publisher capabilities."];
  Node3 -> Node2 [dir="back",color="midnightblue",fontsize="10",style="solid",arrowtail="onormal",fontname="Helvetica"];
  Node3 [label="{EventPublisher\n||+ ~EventPublisher()\l+ notifyEventSubscribers()\l+ attachEventSubscriber()\l+ detachEventSubscriber()\l+ operator==()\l+ operator!=()\l# EventPublisher()\l- ensureEntryExists()\l}",height=0.2,width=0.4,color="black",URL="$class_event_publisher.html",tooltip=" "];
  Node4 -> Node3 [color="grey25",fontsize="10",style="solid",label=" #event_subscribers_" ,arrowhead="odiamond",fontname="Helvetica"];
  Node4 [label="{map\< Event::EventType,\l std::list\< EventSubscriber * \> \>\n||}",height=0.2,width=0.4,color="grey75",tooltip=" "];
  Node5 -> Node2 [dir="back",color="midnightblue",fontsize="10",style="solid",arrowtail="onormal",fontname="Helvetica"];
  Node5 [label="{EventHandler\< Event \>\n||+ handleEvent()\l# EventHandler()\l}",height=0.2,width=0.4,color="black",URL="$class_event_handler.html",tooltip=" "];
  Node6 -> Node5 [dir="back",color="orange",fontsize="10",style="solid",label=" \< Event \>" ,fontname="Helvetica"];
  Node6 [label="{EventHandler\< E \>\n||+ handleEvent()\l# EventHandler()\l}",height=0.2,width=0.4,color="black",URL="$class_event_handler.html",tooltip=" "];
  Node7 -> Node1 [color="grey25",fontsize="10",style="solid",label=" -state_" ,arrowhead="odiamond",fontname="Helvetica"];
  Node7 [label="{ActiveGameState\n||+ get_board()\l+ get_player_tank()\l+ ActiveGameState()\l+ ActiveGameState()\l}",height=0.2,width=0.4,color="black",URL="$class_active_game_state.html",tooltip=" "];
  Node8 -> Node7 [dir="back",color="midnightblue",fontsize="10",style="solid",arrowtail="onormal",fontname="Helvetica"];
  Node8 [label="{GameState\n||+ ~GameState()\l+ getEventHandler()\l# GameState()\l}",height=0.2,width=0.4,color="black",URL="$class_game_state.html",tooltip=" "];
  Node9 -> Node8 [color="grey25",fontsize="10",style="solid",label=" #game_" ,arrowhead="odiamond",fontname="Helvetica"];
  Node9 [label="{Game\n||+ Game()\l+ Game()\l+ run()\l+ setActiveState()\l+ setFinishedState()\l+ setPauseState()\l+ setMenuState()\l+ quit()\l+ getState()\l+ getStats()\l+ getBoard()\l+ start()\l+ end()\l# setup()\l# initStates()\l# initComponents()\l# initScoreboard()\l# initUI()\l# reset()\l# prepareLevel()\l# redrawUI()\l}",height=0.2,width=0.4,color="black",URL="$class_game.html",tooltip=" "];
  Node10 -> Node9 [color="grey25",fontsize="10",style="solid",label=" #keyboardController_" ,arrowhead="odiamond",fontname="Helvetica"];
  Node10 [label="{unique_ptr\< KeyboardController \>\n||}",height=0.2,width=0.4,color="grey75",tooltip=" "];
  Node11 -> Node9 [color="grey25",fontsize="10",style="solid",label=" #window_" ,arrowhead="odiamond",fontname="Helvetica"];
  Node11 [label="{unique_ptr\< Window \>\n||}",height=0.2,width=0.4,color="grey75",tooltip=" "];
  Node12 -> Node9 [color="grey25",fontsize="10",style="solid",label=" #gameStats_" ,arrowhead="odiamond",fontname="Helvetica"];
  Node12 [label="{unique_ptr\< GameStatistics \>\n||}",height=0.2,width=0.4,color="grey75",tooltip=" "];
  Node13 -> Node9 [color="grey25",fontsize="10",style="solid",label=" #menu_state_\n#finished_state_\n#pause_state_\n#active_state_" ,arrowhead="odiamond",fontname="Helvetica"];
  Node13 [label="{unique_ptr\< GameState \>\n||}",height=0.2,width=0.4,color="grey75",tooltip=" "];
  Node14 -> Node9 [color="grey25",fontsize="10",style="solid",label=" #graphicEventHandler_" ,arrowhead="odiamond",fontname="Helvetica"];
  Node14 [label="{unique_ptr\< GraphicEvent\lHandler \>\n||}",height=0.2,width=0.4,color="grey75",tooltip=" "];
  Node15 -> Node9 [color="grey25",fontsize="10",style="solid",label=" #eventQueue_" ,arrowhead="odiamond",fontname="Helvetica"];
  Node15 [label="{EventQueue\< Event \>\n||+ EventQueue()\l+ operator=()\l+ registerEvent()\l+ pop()\l+ isEmpty()\l+ size()\l+ clear()\l+ instance()\l- EventQueue()\l}",height=0.2,width=0.4,color="black",URL="$class_event_queue.html",tooltip=" "];
  Node16 -> Node15 [color="grey25",fontsize="10",style="solid",label=" #events_" ,arrowhead="odiamond",fontname="Helvetica"];
  Node16 [label="{queue\< std::unique\l_ptr\< Event \> \>\n||}",height=0.2,width=0.4,color="grey75",tooltip=" "];
  Node17 -> Node15 [color="grey25",fontsize="10",style="solid",label=" #self_" ,arrowhead="odiamond",fontname="Helvetica"];
  Node17 [label="{unique_ptr\< EventQueue \>\n||}",height=0.2,width=0.4,color="grey75",tooltip=" "];
  Node18 -> Node15 [dir="back",color="orange",fontsize="10",style="solid",label=" \< Event \>" ,fontname="Helvetica"];
  Node18 [label="{EventQueue\< E \>\n||+ EventQueue()\l+ operator=()\l+ registerEvent()\l+ pop()\l+ isEmpty()\l+ size()\l+ clear()\l+ instance()\l- EventQueue()\l}",height=0.2,width=0.4,color="black",URL="$class_event_queue.html",tooltip="Singleton class wrapper for std::queue<E>."];
  Node19 -> Node18 [color="grey25",fontsize="10",style="solid",label=" #events_" ,arrowhead="odiamond",fontname="Helvetica"];
  Node19 [label="{queue\< std::unique\l_ptr\< E \> \>\n||}",height=0.2,width=0.4,color="grey75",tooltip=" "];
  Node17 -> Node18 [color="grey25",fontsize="10",style="solid",label=" #self_" ,arrowhead="odiamond",fontname="Helvetica"];
  Node20 -> Node9 [color="grey25",fontsize="10",style="solid",label=" #gameStatsIO_" ,arrowhead="odiamond",fontname="Helvetica"];
  Node20 [label="{unique_ptr\< GameStatsIO \>\n||}",height=0.2,width=0.4,color="grey75",tooltip=" "];
  Node21 -> Node9 [color="grey25",fontsize="10",style="solid",label=" #clock_" ,arrowhead="odiamond",fontname="Helvetica"];
  Node21 [label="{Clock\n||+ Clock()\l+ Clock()\l+ operator=()\l+ tick()\l+ sleep()\l+ initialize()\l+ instance()\l- Clock()\l}",height=0.2,width=0.4,color="black",URL="$class_clock.html",tooltip="Represents an externally controlled clock running at a given frequency."];
  Node22 -> Node21 [dir="back",color="midnightblue",fontsize="10",style="solid",arrowtail="onormal",fontname="Helvetica"];
  Node22 [label="{SimplePublisher\n||+ ~SimplePublisher()\l+ notifySubscribers()\l+ attachSubscriber()\l+ detachSubscriber()\l+ operator==()\l+ operator!=()\l# SimplePublisher()\l}",height=0.2,width=0.4,color="black",URL="$class_simple_publisher.html",tooltip=" "];
  Node23 -> Node22 [color="grey25",fontsize="10",style="solid",label=" #subscribers_" ,arrowhead="odiamond",fontname="Helvetica"];
  Node23 [label="{vector\< SimpleSubscriber * \>\n||}",height=0.2,width=0.4,color="grey75",tooltip=" "];
  Node24 -> Node21 [color="grey25",fontsize="10",style="solid",label=" -interval_" ,arrowhead="odiamond",fontname="Helvetica"];
  Node24 [label="{nanoseconds\n||}",height=0.2,width=0.4,color="grey75",tooltip=" "];
  Node25 -> Node21 [color="grey25",fontsize="10",style="solid",label=" -self_" ,arrowhead="odiamond",fontname="Helvetica"];
  Node25 [label="{unique_ptr\< Clock \>\n||}",height=0.2,width=0.4,color="grey75",tooltip=" "];
  Node26 -> Node21 [color="grey25",fontsize="10",style="solid",label=" -last_tick_" ,arrowhead="odiamond",fontname="Helvetica"];
  Node26 [label="{time_point\< std::chrono\l::steady_clock \>\n||}",height=0.2,width=0.4,color="grey75",tooltip=" "];
  Node27 -> Node9 [color="grey25",fontsize="10",style="solid",label=" #running_" ,arrowhead="odiamond",fontname="Helvetica"];
  Node27 [label="{bool\n||}",height=0.2,width=0.4,color="grey75",tooltip=" "];
  Node28 -> Node9 [color="grey25",fontsize="10",style="solid",label=" #board_" ,arrowhead="odiamond",fontname="Helvetica"];
  Node28 [label="{unique_ptr\< Board \>\n||}",height=0.2,width=0.4,color="grey75",tooltip=" "];
  Node8 -> Node9 [color="grey25",fontsize="10",style="solid",label=" #state_" ,arrowhead="odiamond",fontname="Helvetica"];
  Node29 -> Node8 [color="grey25",fontsize="10",style="solid",label=" #eventHandler_" ,arrowhead="odiamond",fontname="Helvetica"];
  Node29 [label="{unique_ptr\< PublisherEvent\lHandler \>\n||}",height=0.2,width=0.4,color="grey75",tooltip=" "];
  Node30 -> Node7 [color="grey25",fontsize="10",style="solid",label=" -board_" ,arrowhead="odiamond",fontname="Helvetica"];
  Node30 [label="{Board\n||+ Board()\l+ setTankMoving()\l+ setTankDirection()\l+ moveAllEntities()\l+ moveEntity()\l+ fireTank()\l+ spawnTank()\l+ spawnPlayer()\l+ spawnPlayer()\l+ setGrid()\l+ deleteTile()\l+ killAllEnemyEntities()\l+ removeEntity()\l+ removeAllEntities()\l+ getSizeX()\l+ getSizeY()\l+ snapTankToGrid()\l+ loadLevel()\l+ getPlayerTank()\l+ hitTank()\l+ getGrid()\l# validateEntityPosition()\l# createCollisionEvent()\l# endIfNoBotsLeft()\l}",height=0.2,width=0.4,color="black",URL="$class_board.html",tooltip="Aggregates and manipulates tank, bullet, and tile objects."];
  Node31 -> Node30 [color="grey25",fontsize="10",style="solid",label=" #botController" ,arrowhead="odiamond",fontname="Helvetica"];
  Node31 [label="{BotController\n||+ BotController()\l+ operator=()\l+ makeBotDecision()\l+ registerBot()\l+ deregisterBot()\l+ deregisterAllBots()\l+ getRegisteredBotsCount()\l+ notify()\l+ setSpawnpoints()\l+ setTypes()\l+ setCounting()\l+ zeroCooldown()\l+ getRemainingBotsCount()\l+ instance()\l+ initialize()\l# BotController()\l# requestSpawnBot()\l}",height=0.2,width=0.4,color="black",URL="$class_bot_controller.html",tooltip=" "];
  Node32 -> Node31 [dir="back",color="midnightblue",fontsize="10",style="solid",arrowtail="onormal",fontname="Helvetica"];
  Node32 [label="{SimpleSubscriber\n||+ ~SimpleSubscriber()\l+ subscribe()\l+ unsubscribe()\l+ removeDeletedSubject()\l+ notify()\l# SimpleSubscriber()\l}",height=0.2,width=0.4,color="black",URL="$class_simple_subscriber.html",tooltip=" "];
  Node33 -> Node32 [color="grey25",fontsize="10",style="solid",label=" #subscribedSubjects_" ,arrowhead="odiamond",fontname="Helvetica"];
  Node33 [label="{vector\< SimplePublisher * \>\n||}",height=0.2,width=0.4,color="grey75",tooltip=" "];
  Node34 -> Node31 [color="grey25",fontsize="10",style="solid",label=" #self_" ,arrowhead="odiamond",fontname="Helvetica"];
  Node34 [label="{unique_ptr\< BotController \>\n||}",height=0.2,width=0.4,color="grey75",tooltip=" "];
  Node35 -> Node31 [color="grey25",fontsize="10",style="solid",label=" #spawnpoints_" ,arrowhead="odiamond",fontname="Helvetica"];
  Node35 [label="{vector\< std::pair\<\l unsigned int, unsigned\l int \> \>\n||}",height=0.2,width=0.4,color="grey75",tooltip=" "];
  Node15 -> Node31 [color="grey25",fontsize="10",style="solid",label=" #eventQueue_" ,arrowhead="odiamond",fontname="Helvetica"];
  Node27 -> Node31 [color="grey25",fontsize="10",style="solid",label=" #counting" ,arrowhead="odiamond",fontname="Helvetica"];
  Node36 -> Node31 [color="grey25",fontsize="10",style="solid",label=" #maxRegisteredBots\l_\n#maxSpawnCooldown\n#registeredBots\l_\n#spawnCooldown" ,arrowhead="odiamond",fontname="Helvetica"];
  Node36 [label="{unsigned int\n||}",height=0.2,width=0.4,color="grey75",tooltip=" "];
  Node37 -> Node31 [color="grey25",fontsize="10",style="solid",label=" #types_" ,arrowhead="odiamond",fontname="Helvetica"];
  Node37 [label="{queue\< Tank::TankType \>\n||}",height=0.2,width=0.4,color="grey75",tooltip=" "];
  Node38 -> Node30 [color="grey25",fontsize="10",style="solid",label=" #entityController_" ,arrowhead="odiamond",fontname="Helvetica"];
  Node38 [label="{unique_ptr\< EntityController \>\n||}",height=0.2,width=0.4,color="grey75",tooltip=" "];
  Node39 -> Node30 [color="grey25",fontsize="10",style="solid",label=" #grid_" ,arrowhead="odiamond",fontname="Helvetica"];
  Node39 [label="{unique_ptr\< Grid \>\n||}",height=0.2,width=0.4,color="grey75",tooltip=" "];
  Node15 -> Node30 [color="grey25",fontsize="10",style="solid",label=" #eventQueue_" ,arrowhead="odiamond",fontname="Helvetica"];
  Node40 -> Node7 [color="grey25",fontsize="10",style="solid",label=" -player_tank_" ,arrowhead="odiamond",fontname="Helvetica"];
  Node40 [label="{shared_ptr\< PlayerTank \>\n||}",height=0.2,width=0.4,color="grey75",tooltip=" "];
  Node9 -> Node1 [color="grey25",fontsize="10",style="solid",label=" -game_" ,arrowhead="odiamond",fontname="Helvetica"];
  Node15 -> Node1 [color="grey25",fontsize="10",style="solid",label=" -eventQueue_" ,arrowhead="odiamond",fontname="Helvetica"];
}
