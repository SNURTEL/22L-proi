digraph "BotController"
{
 // INTERACTIVE_SVG=YES
 // LATEX_PDF_SIZE
  bgcolor="transparent";
  edge [fontname="Helvetica",fontsize="10",labelfontname="Helvetica",labelfontsize="10"];
  node [fontname="Helvetica",fontsize="10",shape=record];
  Node1 [label="{BotController\n||+ BotController()\l+ operator=()\l+ makeBotDecision()\l+ registerBot()\l+ deregisterBot()\l+ deregisterAllBots()\l+ getRegisteredBotsCount()\l+ notify()\l+ setSpawnpoints()\l+ setTypes()\l+ setCounting()\l+ zeroCooldown()\l+ getRemainingBotsCount()\l+ instance()\l+ initialize()\l# BotController()\l# requestSpawnBot()\l}",height=0.2,width=0.4,color="black", fillcolor="grey75", style="filled", fontcolor="black",tooltip=" "];
  Node2 -> Node1 [dir="back",color="midnightblue",fontsize="10",style="solid",arrowtail="onormal",fontname="Helvetica"];
  Node2 [label="{SimpleSubscriber\n||+ ~SimpleSubscriber()\l+ subscribe()\l+ unsubscribe()\l+ removeDeletedSubject()\l+ notify()\l# SimpleSubscriber()\l}",height=0.2,width=0.4,color="black",URL="$class_simple_subscriber.html",tooltip=" "];
  Node3 -> Node2 [color="grey25",fontsize="10",style="solid",label=" #subscribedSubjects_" ,arrowhead="odiamond",fontname="Helvetica"];
  Node3 [label="{vector\< SimplePublisher * \>\n||}",height=0.2,width=0.4,color="grey75",tooltip=" "];
  Node4 -> Node1 [color="grey25",fontsize="10",style="solid",label=" #self_" ,arrowhead="odiamond",fontname="Helvetica"];
  Node4 [label="{unique_ptr\< BotController \>\n||}",height=0.2,width=0.4,color="grey75",tooltip=" "];
  Node5 -> Node1 [color="grey25",fontsize="10",style="solid",label=" #spawnpoints_" ,arrowhead="odiamond",fontname="Helvetica"];
  Node5 [label="{vector\< std::pair\<\l unsigned int, unsigned\l int \> \>\n||}",height=0.2,width=0.4,color="grey75",tooltip=" "];
  Node6 -> Node1 [color="grey25",fontsize="10",style="solid",label=" #eventQueue_" ,arrowhead="odiamond",fontname="Helvetica"];
  Node6 [label="{EventQueue\< Event \>\n||+ EventQueue()\l+ operator=()\l+ registerEvent()\l+ pop()\l+ isEmpty()\l+ size()\l+ clear()\l+ instance()\l- EventQueue()\l}",height=0.2,width=0.4,color="black",URL="$class_event_queue.html",tooltip=" "];
  Node7 -> Node6 [color="grey25",fontsize="10",style="solid",label=" #events_" ,arrowhead="odiamond",fontname="Helvetica"];
  Node7 [label="{queue\< std::unique\l_ptr\< Event \> \>\n||}",height=0.2,width=0.4,color="grey75",tooltip=" "];
  Node8 -> Node6 [color="grey25",fontsize="10",style="solid",label=" #self_" ,arrowhead="odiamond",fontname="Helvetica"];
  Node8 [label="{unique_ptr\< EventQueue \>\n||}",height=0.2,width=0.4,color="grey75",tooltip=" "];
  Node9 -> Node6 [dir="back",color="orange",fontsize="10",style="solid",label=" \< Event \>" ,fontname="Helvetica"];
  Node9 [label="{EventQueue\< E \>\n||+ EventQueue()\l+ operator=()\l+ registerEvent()\l+ pop()\l+ isEmpty()\l+ size()\l+ clear()\l+ instance()\l- EventQueue()\l}",height=0.2,width=0.4,color="black",URL="$class_event_queue.html",tooltip="Singleton class wrapper for std::queue<E>."];
  Node10 -> Node9 [color="grey25",fontsize="10",style="solid",label=" #events_" ,arrowhead="odiamond",fontname="Helvetica"];
  Node10 [label="{queue\< std::unique\l_ptr\< E \> \>\n||}",height=0.2,width=0.4,color="grey75",tooltip=" "];
  Node8 -> Node9 [color="grey25",fontsize="10",style="solid",label=" #self_" ,arrowhead="odiamond",fontname="Helvetica"];
  Node11 -> Node1 [color="grey25",fontsize="10",style="solid",label=" #counting" ,arrowhead="odiamond",fontname="Helvetica"];
  Node11 [label="{bool\n||}",height=0.2,width=0.4,color="grey75",tooltip=" "];
  Node12 -> Node1 [color="grey25",fontsize="10",style="solid",label=" #maxRegisteredBots\l_\n#maxSpawnCooldown\n#registeredBots\l_\n#spawnCooldown" ,arrowhead="odiamond",fontname="Helvetica"];
  Node12 [label="{unsigned int\n||}",height=0.2,width=0.4,color="grey75",tooltip=" "];
  Node13 -> Node1 [color="grey25",fontsize="10",style="solid",label=" #types_" ,arrowhead="odiamond",fontname="Helvetica"];
  Node13 [label="{queue\< Tank::TankType \>\n||}",height=0.2,width=0.4,color="grey75",tooltip=" "];
}
