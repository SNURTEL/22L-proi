digraph "EntityController"
{
 // INTERACTIVE_SVG=YES
 // LATEX_PDF_SIZE
  bgcolor="transparent";
  edge [fontname="Helvetica",fontsize="10",labelfontname="Helvetica",labelfontsize="10"];
  node [fontname="Helvetica",fontsize="10",shape=record];
  Node1 [label="{EntityController\n||+ EntityController()\l+ createTank()\l+ hitTank()\l+ killTank()\l+ removeEntity()\l+ moveAllEntities()\l+ moveEntity()\l+ setTankMoving()\l+ setTankDirection()\l+ findEntityAtPosition()\l+ getPlayer()\l+ addEntity()\l+ addEntity()\l+ addEntity()\l+ addEntity()\l+ checkEntityCollisions()\l+ getAllEntities()\l+ clear()\l}",height=0.2,width=0.4,color="black", fillcolor="grey75", style="filled", fontcolor="black",tooltip="Aggregates and manipulates Entity objects."];
  Node2 -> Node1 [color="grey25",fontsize="10",style="solid",label=" #entities_" ,arrowhead="odiamond",fontname="Helvetica"];
  Node2 [label="{vector\< std::shared\l_ptr\< Entity \> \>\n||}",height=0.2,width=0.4,color="grey75",tooltip=" "];
  Node3 -> Node1 [color="grey25",fontsize="10",style="solid",label=" #eventQueue_" ,arrowhead="odiamond",fontname="Helvetica"];
  Node3 [label="{EventQueue\< Event \>\n||+ EventQueue()\l+ operator=()\l+ registerEvent()\l+ pop()\l+ isEmpty()\l+ size()\l+ clear()\l+ instance()\l- EventQueue()\l}",height=0.2,width=0.4,color="black",URL="$class_event_queue.html",tooltip=" "];
  Node4 -> Node3 [color="grey25",fontsize="10",style="solid",label=" #events_" ,arrowhead="odiamond",fontname="Helvetica"];
  Node4 [label="{queue\< std::unique\l_ptr\< Event \> \>\n||}",height=0.2,width=0.4,color="grey75",tooltip=" "];
  Node5 -> Node3 [color="grey25",fontsize="10",style="solid",label=" #self_" ,arrowhead="odiamond",fontname="Helvetica"];
  Node5 [label="{unique_ptr\< EventQueue \>\n||}",height=0.2,width=0.4,color="grey75",tooltip=" "];
  Node6 -> Node3 [dir="back",color="orange",fontsize="10",style="solid",label=" \< Event \>" ,fontname="Helvetica"];
  Node6 [label="{EventQueue\< E \>\n||+ EventQueue()\l+ operator=()\l+ registerEvent()\l+ pop()\l+ isEmpty()\l+ size()\l+ clear()\l+ instance()\l- EventQueue()\l}",height=0.2,width=0.4,color="black",URL="$class_event_queue.html",tooltip="Singleton class wrapper for std::queue<E>."];
  Node7 -> Node6 [color="grey25",fontsize="10",style="solid",label=" #events_" ,arrowhead="odiamond",fontname="Helvetica"];
  Node7 [label="{queue\< std::unique\l_ptr\< E \> \>\n||}",height=0.2,width=0.4,color="grey75",tooltip=" "];
  Node5 -> Node6 [color="grey25",fontsize="10",style="solid",label=" #self_" ,arrowhead="odiamond",fontname="Helvetica"];
  Node8 -> Node1 [color="grey25",fontsize="10",style="solid",label=" #player_" ,arrowhead="odiamond",fontname="Helvetica"];
  Node8 [label="{shared_ptr\< PlayerTank \>\n||}",height=0.2,width=0.4,color="grey75",tooltip=" "];
}
