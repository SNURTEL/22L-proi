digraph "ActiveEventHandler"
{
 // INTERACTIVE_SVG=YES
 // LATEX_PDF_SIZE
  bgcolor="transparent";
  edge [fontname="Helvetica",fontsize="10",labelfontname="Helvetica",labelfontsize="10"];
  node [fontname="Helvetica",fontsize="10",shape=record];
  Node1 [label="{ActiveEventHandler\n||+ ActiveEventHandler()\l+ ActiveEventHandler()\l+ processEvent()\l}",height=0.2,width=0.4,color="black", fillcolor="grey75", style="filled", fontcolor="black",tooltip=" "];
  Node2 -> Node1 [dir="back",color="midnightblue",fontsize="10",style="solid",arrowtail="onormal",fontname="Helvetica"];
  Node2 [label="{PublisherEventHandler\n||+ handleEvent()\l+ processEvent()\l# PublisherEventHandler()\l}",height=0.2,width=0.4,color="black",URL="$class_publisher_event_handler.html",tooltip="Extended EventHandler for Event class events with publisher capabilities."];
  Node3 -> Node2 [dir="back",color="midnightblue",fontsize="10",style="solid",arrowtail="onormal",fontname="Helvetica"];
  Node3 [label="{EventPublisher\n||+ ~EventPublisher()\l+ notifyEventSubscribers()\l+ attachEventSubscriber()\l+ detachEventSubscriber()\l+ operator==()\l+ operator!=()\l# EventPublisher()\l- ensureEntryExists()\l}",height=0.2,width=0.4,color="black",URL="$class_event_publisher.html",tooltip=" "];
  Node4 -> Node3 [color="grey25",fontsize="10",style="solid",label=" #event_subscribers_" ,arrowhead="odiamond",fontname="Helvetica"];
  Node4 [label="{map\< Event::EventType,\l std::list\< EventSubscriber * \> \>\n||}",height=0.2,width=0.4,color="grey75",tooltip=" "];
  Node5 -> Node2 [dir="back",color="midnightblue",fontsize="10",style="solid",arrowtail="onormal",fontname="Helvetica"];
  Node5 [label="{EventHandler\< Event \>\n||+ handleEvent()\l# EventHandler()\l}",height=0.2,width=0.4,color="black",URL="$class_event_handler.html",tooltip=" "];
  Node6 -> Node5 [dir="back",color="orange",fontsize="10",style="solid",label=" \< Event \>" ,fontname="Helvetica"];
  Node6 [label="{EventHandler\< E \>\n||+ handleEvent()\l# EventHandler()\l}",height=0.2,width=0.4,color="black",URL="$class_event_handler.html",tooltip=" "];
  Node7 -> Node1 [color="grey25",fontsize="10",style="solid",label=" -state_" ,arrowhead="odiamond",fontname="Helvetica"];
  Node7 [label="{ActiveGameState\n||+ get_board()\l+ get_player_tank()\l+ ActiveGameState()\l+ ActiveGameState()\l}",height=0.2,width=0.4,color="black",URL="$class_active_game_state.html",tooltip=" "];
  Node8 -> Node7 [dir="back",color="midnightblue",fontsize="10",style="solid",arrowtail="onormal",fontname="Helvetica"];
  Node8 [label="{GameState\n||+ ~GameState()\l+ getEventHandler()\l# GameState()\l}",height=0.2,width=0.4,color="black",URL="$class_game_state.html",tooltip=" "];
  Node9 -> Node8 [color="grey25",fontsize="10",style="solid",label=" #game_" ,arrowhead="odiamond",fontname="Helvetica"];
  Node9 [label="{Game\n||+ Game()\l+ Game()\l+ run()\l+ setActiveState()\l+ setFinishedState()\l+ setPauseState()\l+ setMenuState()\l+ quit()\l+ get_state()\l+ get_point_system()\l- setup()\l- createRenderWindow()\l}",height=0.2,width=0.4,color="black",URL="$class_game.html",tooltip=" "];
  Node10 -> Node9 [color="grey25",fontsize="10",style="solid",label=" -keyboardController_" ,arrowhead="odiamond",fontname="Helvetica"];
  Node10 [label="{unique_ptr\< KeyboardController \>\n||}",height=0.2,width=0.4,color="grey75",tooltip=" "];
  Node11 -> Node9 [color="grey25",fontsize="10",style="solid",label=" -pause_state_\n-menu_state_\n-active_state_\n-finished_state_" ,arrowhead="odiamond",fontname="Helvetica"];
  Node11 [label="{unique_ptr\< GameState \>\n||}",height=0.2,width=0.4,color="grey75",tooltip=" "];
  Node12 -> Node9 [color="grey25",fontsize="10",style="solid",label=" -window_" ,arrowhead="odiamond",fontname="Helvetica"];
  Node12 [label="{unique_ptr\< sf::RenderWindow \>\n||}",height=0.2,width=0.4,color="grey75",tooltip=" "];
  Node13 -> Node9 [color="grey25",fontsize="10",style="solid",label=" -eventQueue_" ,arrowhead="odiamond",fontname="Helvetica"];
  Node13 [label="{EventQueue\< Event \>\n||+ EventQueue()\l+ operator=()\l+ registerEvent()\l+ pop()\l+ isEmpty()\l+ size()\l+ clear()\l+ instance()\l- EventQueue()\l}",height=0.2,width=0.4,color="black",URL="$class_event_queue.html",tooltip=" "];
  Node14 -> Node13 [color="grey25",fontsize="10",style="solid",label=" #events_" ,arrowhead="odiamond",fontname="Helvetica"];
  Node14 [label="{queue\< std::unique\l_ptr\< Event \> \>\n||}",height=0.2,width=0.4,color="grey75",tooltip=" "];
  Node15 -> Node13 [color="grey25",fontsize="10",style="solid",label=" #self_" ,arrowhead="odiamond",fontname="Helvetica"];
  Node15 [label="{unique_ptr\< EventQueue \>\n||}",height=0.2,width=0.4,color="grey75",tooltip=" "];
  Node16 -> Node13 [dir="back",color="orange",fontsize="10",style="solid",label=" \< Event \>" ,fontname="Helvetica"];
  Node16 [label="{EventQueue\< E \>\n||+ EventQueue()\l+ operator=()\l+ registerEvent()\l+ pop()\l+ isEmpty()\l+ size()\l+ clear()\l+ instance()\l- EventQueue()\l}",height=0.2,width=0.4,color="black",URL="$class_event_queue.html",tooltip="Singleton class wrapper for std::queue<E>."];
  Node17 -> Node16 [color="grey25",fontsize="10",style="solid",label=" #events_" ,arrowhead="odiamond",fontname="Helvetica"];
  Node17 [label="{queue\< std::unique\l_ptr\< E \> \>\n||}",height=0.2,width=0.4,color="grey75",tooltip=" "];
  Node15 -> Node16 [color="grey25",fontsize="10",style="solid",label=" #self_" ,arrowhead="odiamond",fontname="Helvetica"];
  Node18 -> Node9 [color="grey25",fontsize="10",style="solid",label=" -clock_" ,arrowhead="odiamond",fontname="Helvetica"];
  Node18 [label="{Clock\n||+ Clock()\l+ Clock()\l+ operator=()\l+ tick()\l+ sleep()\l+ initialize()\l+ instance()\l- Clock()\l}",height=0.2,width=0.4,color="black",URL="$class_clock.html",tooltip="Represents an externally controlled clock running at a given frequency."];
  Node19 -> Node18 [dir="back",color="midnightblue",fontsize="10",style="solid",arrowtail="onormal",fontname="Helvetica"];
  Node19 [label="{SimplePublisher\n||+ ~SimplePublisher()\l+ notifySubscribers()\l+ attachSubscriber()\l+ detachSubscriber()\l+ operator==()\l+ operator!=()\l# SimplePublisher()\l}",height=0.2,width=0.4,color="black",URL="$class_simple_publisher.html",tooltip=" "];
  Node20 -> Node19 [color="grey25",fontsize="10",style="solid",label=" #subscribers_" ,arrowhead="odiamond",fontname="Helvetica"];
  Node20 [label="{vector\< SimpleSubscriber * \>\n||}",height=0.2,width=0.4,color="grey75",tooltip=" "];
  Node21 -> Node18 [color="grey25",fontsize="10",style="solid",label=" -interval_" ,arrowhead="odiamond",fontname="Helvetica"];
  Node21 [label="{nanoseconds\n||}",height=0.2,width=0.4,color="grey75",tooltip=" "];
  Node22 -> Node18 [color="grey25",fontsize="10",style="solid",label=" -self_" ,arrowhead="odiamond",fontname="Helvetica"];
  Node22 [label="{unique_ptr\< Clock \>\n||}",height=0.2,width=0.4,color="grey75",tooltip=" "];
  Node23 -> Node18 [color="grey25",fontsize="10",style="solid",label=" -last_tick_" ,arrowhead="odiamond",fontname="Helvetica"];
  Node23 [label="{time_point\< std::chrono\l::steady_clock \>\n||}",height=0.2,width=0.4,color="grey75",tooltip=" "];
  Node24 -> Node9 [color="grey25",fontsize="10",style="solid",label=" -running_" ,arrowhead="odiamond",fontname="Helvetica"];
  Node24 [label="{bool\n||}",height=0.2,width=0.4,color="grey75",tooltip=" "];
  Node25 -> Node9 [color="grey25",fontsize="10",style="solid",label=" -points_" ,arrowhead="odiamond",fontname="Helvetica"];
  Node25 [label="{PointSystem\n||+ PointSystem()\l+ get_points()\l+ set_points()\l+ add_points()\l}",height=0.2,width=0.4,color="black",URL="$class_point_system.html",tooltip=" "];
  Node13 -> Node25 [color="grey25",fontsize="10",style="solid",label=" -eventQueue_" ,arrowhead="odiamond",fontname="Helvetica"];
  Node26 -> Node25 [color="grey25",fontsize="10",style="solid",label=" -points_" ,arrowhead="odiamond",fontname="Helvetica"];
  Node26 [label="{unsigned int\n||}",height=0.2,width=0.4,color="grey75",tooltip=" "];
  Node8 -> Node9 [color="grey25",fontsize="10",style="solid",label=" -state_" ,arrowhead="odiamond",fontname="Helvetica"];
  Node27 -> Node8 [color="grey25",fontsize="10",style="solid",label=" #eventHandler_" ,arrowhead="odiamond",fontname="Helvetica"];
  Node27 [label="{unique_ptr\< PublisherEvent\lHandler \>\n||}",height=0.2,width=0.4,color="grey75",tooltip=" "];
  Node28 -> Node7 [color="grey25",fontsize="10",style="solid",label=" -board_" ,arrowhead="odiamond",fontname="Helvetica"];
  Node28 [label="{Board\n||+ Board()\l+ setTankMoving()\l+ setTankDirection()\l+ moveAllEntities()\l+ moveEntity()\l+ fireTank()\l+ spawnTank()\l+ setGrid()\l+ deleteTile()\l+ killAllEnemyEntities()\l+ removeAllEntities()\l+ getSizeX()\l+ getSizeY()\l+ snapTankToGrid()\l# validateEntityPosition()\l# createCollisionEvent()\l}",height=0.2,width=0.4,color="black",URL="$class_board.html",tooltip="Aggregates and manipulates tank, bullet, and tile objects."];
  Node29 -> Node28 [color="grey25",fontsize="10",style="solid",label=" #entityController_" ,arrowhead="odiamond",fontname="Helvetica"];
  Node29 [label="{unique_ptr\< EntityController \>\n||}",height=0.2,width=0.4,color="grey75",tooltip=" "];
  Node30 -> Node28 [color="grey25",fontsize="10",style="solid",label=" #grid_" ,arrowhead="odiamond",fontname="Helvetica"];
  Node30 [label="{unique_ptr\< Grid \>\n||}",height=0.2,width=0.4,color="grey75",tooltip=" "];
  Node13 -> Node28 [color="grey25",fontsize="10",style="solid",label=" #eventQueue_" ,arrowhead="odiamond",fontname="Helvetica"];
  Node31 -> Node7 [color="grey25",fontsize="10",style="solid",label=" -player_tank_" ,arrowhead="odiamond",fontname="Helvetica"];
  Node31 [label="{Tank\n||+ setFacing()\l+ move()\l+ moveBack()\l+ deltaLives()\l+ getType()\l+ getLives()\l+ setMoving()\l+ isMoving()\l+ getPoints()\l+ setX()\l+ setY()\l+ offsetInCurrentDirection()\l+ createBullet()\l+ notify()\l# Tank()\l}",height=0.2,width=0.4,color="black",URL="$class_tank.html",tooltip="Base class for tank representation."];
  Node32 -> Node31 [dir="back",color="midnightblue",fontsize="10",style="solid",arrowtail="onormal",fontname="Helvetica"];
  Node32 [label="{Entity\n||+ ~Entity()\l+ move()\l+ moveBack()\l+ getX()\l+ getY()\l+ getSpeed()\l+ getFacing()\l+ getSizeX()\l+ getSizeY()\l# Entity()\l# Entity()\l}",height=0.2,width=0.4,color="black",URL="$class_entity.html",tooltip=" "];
  Node33 -> Node32 [color="grey25",fontsize="10",style="solid",label=" #y_\n#speed_\n#size_x_\n#x_\n#size_y_" ,arrowhead="odiamond",fontname="Helvetica"];
  Node33 [label="{float\n||}",height=0.2,width=0.4,color="grey75",tooltip=" "];
  Node34 -> Node32 [color="grey25",fontsize="10",style="solid",label=" #facing_" ,arrowhead="odiamond",fontname="Helvetica"];
  Node34 [label="{Direction\n||}",height=0.2,width=0.4,color="grey75",tooltip=" "];
  Node35 -> Node31 [dir="back",color="midnightblue",fontsize="10",style="solid",arrowtail="onormal",fontname="Helvetica"];
  Node35 [label="{SimpleSubscriber\n||+ ~SimpleSubscriber()\l+ subscribe()\l+ unsubscribe()\l+ removeDeletedSubject()\l+ notify()\l# SimpleSubscriber()\l}",height=0.2,width=0.4,color="black",URL="$class_simple_subscriber.html",tooltip=" "];
  Node36 -> Node35 [color="grey25",fontsize="10",style="solid",label=" #subscribedSubjects_" ,arrowhead="odiamond",fontname="Helvetica"];
  Node36 [label="{vector\< SimplePublisher * \>\n||}",height=0.2,width=0.4,color="grey75",tooltip=" "];
  Node33 -> Node31 [color="grey25",fontsize="10",style="solid",label=" #bulletSpeed_" ,arrowhead="odiamond",fontname="Helvetica"];
  Node37 -> Node31 [color="grey25",fontsize="10",style="solid",label=" #type_" ,arrowhead="odiamond",fontname="Helvetica"];
  Node37 [label="{TankType\n||}",height=0.2,width=0.4,color="grey75",tooltip=" "];
  Node24 -> Node31 [color="grey25",fontsize="10",style="solid",label=" #moving_" ,arrowhead="odiamond",fontname="Helvetica"];
  Node26 -> Node31 [color="grey25",fontsize="10",style="solid",label=" #points_\n#lives_" ,arrowhead="odiamond",fontname="Helvetica"];
  Node9 -> Node1 [color="grey25",fontsize="10",style="solid",label=" -game_" ,arrowhead="odiamond",fontname="Helvetica"];
  Node13 -> Node1 [color="grey25",fontsize="10",style="solid",label=" -eventQueue_" ,arrowhead="odiamond",fontname="Helvetica"];
}
