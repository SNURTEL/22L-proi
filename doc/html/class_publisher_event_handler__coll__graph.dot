digraph "PublisherEventHandler"
{
 // INTERACTIVE_SVG=YES
 // LATEX_PDF_SIZE
  bgcolor="transparent";
  edge [fontname="Helvetica",fontsize="10",labelfontname="Helvetica",labelfontsize="10"];
  node [fontname="Helvetica",fontsize="10",shape=record];
  Node1 [label="{PublisherEventHandler\n||+ handleEvent()\l+ processEvent()\l# PublisherEventHandler()\l}",height=0.2,width=0.4,color="black", fillcolor="grey75", style="filled", fontcolor="black",tooltip="Extended EventHandler for Event class events with publisher capabilities."];
  Node2 -> Node1 [dir="back",color="midnightblue",fontsize="10",style="solid",arrowtail="onormal",fontname="Helvetica"];
  Node2 [label="{EventPublisher\n||+ ~EventPublisher()\l+ notifyEventSubscribers()\l+ attachEventSubscriber()\l+ detachEventSubscriber()\l+ operator==()\l+ operator!=()\l# EventPublisher()\l- ensureEntryExists()\l}",height=0.2,width=0.4,color="black",URL="$class_event_publisher.html",tooltip=" "];
  Node3 -> Node2 [color="grey25",fontsize="10",style="solid",label=" #event_subscribers_" ,arrowhead="odiamond",fontname="Helvetica"];
  Node3 [label="{map\< Event::EventType,\l std::list\< EventSubscriber * \> \>\n||}",height=0.2,width=0.4,color="grey75",tooltip=" "];
  Node4 -> Node1 [dir="back",color="midnightblue",fontsize="10",style="solid",arrowtail="onormal",fontname="Helvetica"];
  Node4 [label="{EventHandler\< Event \>\n||+ handleEvent()\l# EventHandler()\l}",height=0.2,width=0.4,color="black",URL="$class_event_handler.html",tooltip=" "];
  Node5 -> Node4 [dir="back",color="orange",fontsize="10",style="solid",label=" \< Event \>" ,fontname="Helvetica"];
  Node5 [label="{EventHandler\< E \>\n||+ handleEvent()\l# EventHandler()\l}",height=0.2,width=0.4,color="black",URL="$class_event_handler.html",tooltip=" "];
}
